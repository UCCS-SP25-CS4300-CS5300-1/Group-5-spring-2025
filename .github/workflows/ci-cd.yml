
name: CI/CD Pipeline

on:
  push:

  pull_request:
    branches: [ main ]

jobs:
  test-coverage:
    name: PyTest & Coverage Suite
    ## Courtesy Abi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository  
        uses: actions/checkout@v2

      - name: Set up Python  
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.3

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests with Coverage
        run: |
          coverage run --source=home manage.py test home.tests
          coverage report --fail-under=80 --omit="*/migrations/*,*/manage.py,*/wsgi.py"
          coverage xml
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ## NOTE: unsure where coverage report/artifact is stored currently
      - name: Upload Coverage Report as Artifact  
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          if-no-files-found: ignore  
  
  dependency-check:
    name: Dependency Audit & Update
    runs-on: ubuntu-latest
    needs: test-coverage
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.3

        ## Better python tool management
        ### https://docs.astral.sh/uv/
      - name: Install uv
        run: pip install uv

        ## Dynamically update and display changes to requirements.txt based on source code
        ### displays changes from prior to current in the pipeline logs
      - name: Generate requirements.txt from source
        run: |
          uvx pipreqs --savepath pipreqs.txt .
          bash scripts/pipreqs.sh pipreqs.txt
          diff -u requirements.txt pipreqs.txt || echo "Dependencies updated"

  security-audit:
    name: Security Audits and Testing
    runs-on: ubuntu-latest
    needs: dependency-check
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.3

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install uv

      - name: Run Bandit Security Scan
        run: uvx bandit -r .
        continue-on-error: true 
        ## For now, ensure pipeline continues. In future cases,
        ### sec audits should be addressed prior to deployment

      # - name: Upload Coverage Report as Artifact  
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: coverage.xml
      #     if-no-files-found: ignore  
        
      # - name: Run Safety Check for Vulnerable Dependencies
      #   run: uvx safety check ## NOTE: Safety check is deprecated and `scan` requires browser authentication
                                ### Good tool though for checking vulnerable dependencies

  ## STAGING: Docker & DO Deployment stages
  # build-and-deploy:
  #   name: Build Docker Image and Deploy
  #   runs-on: ubuntu-latest
  #   needs: security-audit
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to DigitalOcean Container Registry
  #       run: echo "${{ secrets.DO_REGISTRY_PASSWORD }}" | docker login registry.digitalocean.com -u ${{ secrets.DO_REGISTRY_USERNAME }} --password-stdin

  #     - name: Build and Tag Docker Image
  #       run: |
  #         docker build -t registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/myapp:${{ github.sha }} .
  #         docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/myapp:${{ github.sha }}

  #     - name: Deploy to DigitalOcean App Platform
  #       env:
  #         DO_TOKEN: ${{ secrets.DO_TOKEN }}
  #       run: |
  #         doctl auth init -t $DO_TOKEN
  #         doctl apps update ${{ secrets.DO_APP_ID }} --spec app.yaml ## `app.yml` will be located/configured 
                                                                       ### in DO platform

