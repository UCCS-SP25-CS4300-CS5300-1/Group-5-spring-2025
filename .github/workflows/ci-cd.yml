name: CI/CD Pipeline
run-name: CI/CD pipeline executed by @${{ github.actor }}

on:
  push:
    paths:
      - '**.py' ## Execute on push only when *.py files have changed?
    branches:
      - '*'
  pull_request:
    branches:
      - main ## Execute all jobs when pull request to main or dev
      - 'dev*' ## Ensure PR's into dev branch execute all jobs

jobs:
  test-coverage:
    name: PyTest & Coverage Suite
    ## Courtesy Abi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository  
        uses: actions/checkout@v2

      - name: Set up Python  
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.3

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests with Coverage
        run: |
          coverage run --source=home manage.py test home.tests
          coverage report --fail-under=80 --omit="*/migrations/*,*/manage.py,*/wsgi.py"
          coverage xml
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload Coverage Report as Artifact  
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          if-no-files-found: ignore  
  
  dependency-check:
    name: Dependency Audit & Update
    runs-on: ubuntu-latest
    needs: test-coverage
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.3

        ## Better python tool management
        ### https://docs.astral.sh/uv/
      - name: Install `uv`
        run: pip install uv

        ## Dynamically update and display changes to requirements.txt based on source code
        ### displays changes from prior to current in the pipeline logs
      - name: Generate `requirements.txt` from Source
        run: |
          uvx pipreqs --savepath pipreqs.txt .
          bash scripts/pipreqs.sh pipreqs.txt
          echo "Consider updating requirements.txt: " 
          uniq pipreqs.txt | tr '[:upper:]' '[:lower:]'

  security-audit:
    name: Security Audits and Testing
    runs-on: ubuntu-latest
    needs: dependency-check
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.3

      - name: Install Dependencies
        run: |
          pip install uv  
          uv pip install -r requirements.txt
          

      - name: Run Bandit Security Scan
        run: uvx bandit -r .
        continue-on-error: true 
        ## For now, ensure pipeline continues. In future cases,
        ### sec audits should be addressed prior to deployment

      - name: Upload Bandit Security Scan as Artifact  
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit.xml
          if-no-files-found: ignore  
        
      # - name: Run Safety Check for Vulnerable Dependencies
      #   run: uvx safety check 
      ## NOTE: Safety check is deprecated and `scan` requires browser authentication
      ### Good tool though for checking vulnerable dependencies
  
  deploy-docker-hub:
    name: Upload Image to Dockerhub
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DH_USER }}
          password: ${{ secrets.DH_TOKEN }}

      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: topazstix/campmate:latest
  
  deploy-aws:
    name: Deploy to AWS EC2 Instance
    runs-on: ubuntu-latest
    needs: deploy-docker-hub
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.3

      - name: Deploy Application
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIV }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "Deploying application to AWS..."
          echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST}

          cd /home/ubuntu/app/docker
          echo "Close currently running docker instances"
          docker compose down
          echo "Update docker image for campmate"
          docker compose pull
          echo "Reinitialize docker swarm in detached mode"
          docker compose up -d